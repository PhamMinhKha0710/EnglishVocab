---
description:
globs:
alwaysApply: false
---
# Clean Architecture Guidelines

This application follows Clean Architecture principles with the following layers:

## 0. Constants Layer (EnglishVocab.Constants)

- **Contains constants, enums and configuration used throughout the application**
- No dependencies on other layers
- Contains:
  - Enum definitions (DifficultyLevel, MasteryLevel, StudyMode, UserRole)
  - Shared constants

## 1. Domain Layer (EnglishVocab.Domain)

- **Core business logic and entities**
- Only depends on Constants layer
- Contains:
  - Entities in Domain/ namespace
  - Common types in Domain/Common/ (BaseEntity)
  - Value Objects
  - Domain Events
  - Domain Exceptions
  - Interfaces for domain services

## 2. Application Layer (EnglishVocab.Application)

- **Use cases and application business rules**
- Depends on Domain and Constants layers
- Implements CQRS pattern (Command Query Responsibility Segregation):
  - Commands: modifying data
  - Queries: retrieving data
- Contains:
  - Command/Query Handlers
  - DTOs (Data Transfer Objects)
  - Interface definitions for infrastructure services
  - Validation logic
  - Services interfaces

## 3. Identity Layer (EnglishVocab.Identity)

- **Authentication and authorization**
- Depends on Application, Domain and Constants layers
- Contains:
  - Identity models (ApplicationUser, ApplicationRole)
  - Identity database context
  - Token services implementation
  - Authentication services implementation
  - User services implementation
  - JWT settings and configuration

## 4. Infrastructure Layer (EnglishVocab.Infrastructure)

- **Technical details and implementations**
- Depends on Application, Domain and Constants layers
- Contains:
  - Database context and configurations
  - Repository implementations
  - Data persistence and Entity configurations
  - External services implementation
  - Audit trail tracking (UserAction)
  - Logging and cross-cutting concerns

## 5. Presentation Layer (EnglishVocab.API)

- **User interface and API endpoints**
- Depends on Application, Identity and Infrastructure layers
- Contains:
  - API Controllers
  - Middleware
  - Filters
  - Configuration
  - Swagger documentation

## Dependency Flow

```
API Layer → Application Layer → Domain Layer → Constants Layer
    ↑             ↑               ↑
    |             |               |
    +--- Identity Layer ----------+
    |                             |
    +--- Infrastructure Layer ----+
```

## Guidelines for Development

1. **Dependencies should always point inward**
   - Outer layers can depend on inner layers
   - Inner layers cannot depend on outer layers

2. **Domain Layer Independence**
   - Domain layer should only depend on Constants
   - No references to UI, database, or external services

3. **Use Dependency Injection**
   - Inject dependencies rather than creating them directly
   - Especially for infrastructure services

4. **Communication between layers**
   - Use interfaces defined in the Application layer
   - Infrastructure and Identity implement these interfaces
   - API layer invokes commands/queries in the Application layer

5. **Entity Design Conventions**
   - All entities inherit from BaseEntity in Domain/Common
   - ID type is long for performance and simplicity
   - Tracking fields (CreatedBy, DateCreated, ModifiedBy, DateModified) in BaseEntity
   - Changes tracking with UserAction entity

6. **CQRS Pattern**
   - Commands: modify state, return nothing
   - Queries: return data, don't modify state
   - Use MediatR for dispatching commands and queries

---
description:
globs:
alwaysApply: false
---
# Backend Domain Model & C# Implementation Standards

This document describes the core domain entities and their relationships in the backend of the English Vocabulary App, along with C# implementation guidelines.

## Core Entities

### User
- Represents an application user
- Properties: Email, PasswordHash, FirstName, LastName, IsActive
- Relationships:
  - One-to-Many with WordSets (a user can have multiple word sets)
  - One-to-Many with UserProgress (tracks user's progress for words)
  - One-to-Many with StudySessions (tracks study sessions)
- Implementation: [User.cs](mdc:src/Backend/EnglishVocab.Domain/Entities/User.cs)

### Word
- Represents a vocabulary word to learn
- Properties: English, Vietnamese, Pronunciation, Example, Notes, ImageUrl, AudioUrl, DifficultyLevel
- Relationships:
  - Many-to-One with WordSet (a word belongs to a word set)
  - One-to-Many with UserProgress (tracks progress of users learning this word)
- Implementation: [Word.cs](mdc:src/Backend/EnglishVocab.Domain/Entities/Word.cs)

### WordSet
- Represents a collection of related words
- Properties: Name, Description, IsPublic
- Relationships:
  - Many-to-One with User (created by a user)
  - One-to-Many with Words (contains multiple words)
- Implementation: [WordSet.cs](mdc:src/Backend/EnglishVocab.Domain/Entities/WordSet.cs)

### UserProgress
- Tracks a user's progress for a specific word
- Properties: MasteryLevel, CorrectCount, IncorrectCount, LastReviewed, NextReviewDate
- Relationships:
  - Many-to-One with User
  - Many-to-One with Word
- Implementation: [UserProgress.cs](mdc:src/Backend/EnglishVocab.Domain/Entities/UserProgress.cs)

### StudySession
- Tracks a study session by a user
- Properties: StartTime, EndTime, WordsStudied, CorrectAnswers, IncorrectAnswers, StudyMode
- Relationships:
  - Many-to-One with User
- Implementation: [StudySession.cs](mdc:src/Backend/EnglishVocab.Domain/Entities/StudySession.cs)

## Enums

### DifficultyLevel
- Easy, Medium, Hard, VeryHard
- Implementation: [DifficultyLevel.cs](mdc:src/Backend/EnglishVocab.Domain/Enums/DifficultyLevel.cs)

### MasteryLevel
- New, Learning, Familiar, Mastered
- Implementation: [MasteryLevel.cs](mdc:src/Backend/EnglishVocab.Domain/Enums/MasteryLevel.cs)

### StudyMode
- Flashcards, Quiz, SpellingTest, MatchingGame
- Implementation: [StudyMode.cs](mdc:src/Backend/EnglishVocab.Domain/Enums/StudyMode.cs)

## Entity Diagram

```
User 1 --- * WordSet
User 1 --- * UserProgress
User 1 --- * StudySession
WordSet 1 --- * Word
Word 1 --- * UserProgress
```

## Entity Implementation Guidelines

All entities inherit from [BaseEntity.cs](mdc:src/Backend/EnglishVocab.Domain/Entities/BaseEntity.cs) which provides common properties like Id, CreatedAt, and UpdatedAt.

### C# Entity Implementation Standards

```csharp
// BaseEntity.cs example
public abstract class BaseEntity
{
    public Guid Id { get; set; } // Primary key
    public DateTime CreatedAt { get; set; }
    public DateTime? UpdatedAt { get; set; }
}

// Entity example with relationships
public class Word : BaseEntity
{
    public string English { get; set; } = string.Empty;
    public string Vietnamese { get; set; } = string.Empty;
    public string? Pronunciation { get; set; }
    public string? Example { get; set; }
    public string? Notes { get; set; }
    public string? ImageUrl { get; set; }
    public string? AudioUrl { get; set; }
    public DifficultyLevel DifficultyLevel { get; set; } = DifficultyLevel.Medium;
    
    // Navigation properties
    public Guid? WordSetId { get; set; }
    public WordSet? WordSet { get; set; }
    public ICollection<UserProgress> UserProgress { get; set; } = new List<UserProgress>();
}
```

### Domain Model Best Practices

1. **Entity Properties**
   - Use nullable reference types (`string?`) for optional properties
   - Provide default values for non-nullable properties
   - Use appropriate data types for each property
   - Use enum types for properties with fixed sets of values

2. **Relationships**
   - Include navigation properties for related entities
   - Use the appropriate collection type (ICollection<T> is recommended)
   - Initialize collections in the constructor or property initializer

3. **Value Objects**
   - Use Value Objects for complex attributes (Email, Address, etc.)
   - Implement Value Objects as immutable record types in C# 9+

4. **Domain Logic**
   - Include domain logic within entities when appropriate
   - Implement validation logic in the entity itself

### Entity Framework Core Configuration

When configuring entities with Entity Framework Core:

```csharp
// Example configuration in FluentAPI
public class WordConfiguration : IEntityTypeConfiguration<Word>
{
    public void Configure(EntityTypeBuilder<Word> builder)
    {
        builder.HasKey(w => w.Id);
        
        builder.Property(w => w.English)
               .IsRequired()
               .HasMaxLength(100);
               
        builder.Property(w => w.Vietnamese)
               .IsRequired()
               .HasMaxLength(100);
               
        builder.HasOne(w => w.WordSet)
               .WithMany(ws => ws.Words)
               .HasForeignKey(w => w.WordSetId)
               .OnDelete(DeleteBehavior.Restrict);
    }
}
```

## Field and Property Naming

- Use PascalCase for all public properties
- Use self-explanatory property names
- Use the following conventions for navigation properties:
  - Single reference: `Entity` (e.g., `User`, `WordSet`)
  - Collection: Plural form (e.g., `Words`, `UserProgress`)
  - Foreign keys: `EntityId` (e.g., `UserId`, `WordId`)

// <auto-generated />
using System;
using EnglishVocab.Infrastructure.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EnglishVocab.Infrastructure.Migrations
{
    [DbContext(typeof(EnglishVocabDatabaseContext))]
    [Migration("20250628190224_addtable")]
    partial class addtable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EnglishVocab.Domain.StudySession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("IncorrectAnswers")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudyMode")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("WordSetId")
                        .HasColumnType("bigint");

                    b.Property<int>("WordsStudied")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WordSetId");

                    b.ToTable("StudySessions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CorrectAnswers = 7,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 6, 29, 2, 2, 24, 347, DateTimeKind.Local).AddTicks(8098),
                            DateModified = new DateTime(2025, 6, 29, 2, 2, 24, 347, DateTimeKind.Local).AddTicks(8517),
                            EndTime = new DateTime(2025, 6, 29, 1, 32, 24, 346, DateTimeKind.Local).AddTicks(8696),
                            IncorrectAnswers = 3,
                            ModifiedBy = "System",
                            StartTime = new DateTime(2025, 6, 29, 1, 2, 24, 346, DateTimeKind.Local).AddTicks(8696),
                            StudyMode = 0,
                            UserId = 1L,
                            WordSetId = 1L,
                            WordsStudied = 10
                        },
                        new
                        {
                            Id = 2L,
                            CorrectAnswers = 12,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 6, 29, 2, 2, 24, 347, DateTimeKind.Local).AddTicks(8705),
                            DateModified = new DateTime(2025, 6, 29, 2, 2, 24, 347, DateTimeKind.Local).AddTicks(8706),
                            EndTime = new DateTime(2025, 6, 28, 2, 47, 24, 346, DateTimeKind.Local).AddTicks(8696),
                            IncorrectAnswers = 3,
                            ModifiedBy = "System",
                            StartTime = new DateTime(2025, 6, 28, 2, 2, 24, 346, DateTimeKind.Local).AddTicks(8696),
                            StudyMode = 1,
                            UserId = 1L,
                            WordSetId = 2L,
                            WordsStudied = 15
                        });
                });

            modelBuilder.Entity("EnglishVocab.Domain.UserAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserActions");
                });

            modelBuilder.Entity("EnglishVocab.Domain.UserProgress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CorrectCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("IncorrectCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastReviewed")
                        .HasColumnType("datetime2");

                    b.Property<int>("MasteryLevel")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("WordId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WordId");

                    b.HasIndex("UserId", "WordId")
                        .IsUnique();

                    b.ToTable("UserProgress");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CorrectCount = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 6, 29, 2, 2, 24, 348, DateTimeKind.Local).AddTicks(7660),
                            DateModified = new DateTime(2025, 6, 29, 2, 2, 24, 348, DateTimeKind.Local).AddTicks(7663),
                            IncorrectCount = 1,
                            LastReviewed = new DateTime(2025, 6, 28, 2, 2, 24, 348, DateTimeKind.Local).AddTicks(6644),
                            MasteryLevel = 1,
                            ModifiedBy = "System",
                            NextReviewDate = new DateTime(2025, 6, 30, 2, 2, 24, 348, DateTimeKind.Local).AddTicks(6644),
                            UserId = 1L,
                            WordId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CorrectCount = 0,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 6, 29, 2, 2, 24, 348, DateTimeKind.Local).AddTicks(7667),
                            DateModified = new DateTime(2025, 6, 29, 2, 2, 24, 348, DateTimeKind.Local).AddTicks(7668),
                            IncorrectCount = 0,
                            MasteryLevel = 0,
                            ModifiedBy = "System",
                            NextReviewDate = new DateTime(2025, 6, 29, 2, 2, 24, 348, DateTimeKind.Local).AddTicks(6644),
                            UserId = 1L,
                            WordId = 2L
                        });
                });

            modelBuilder.Entity("EnglishVocab.Domain.Word", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AudioUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<string>("English")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Example")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Pronunciation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Vietnamese")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("WordSetId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WordSetId");

                    b.ToTable("Words");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AudioUrl = "/audio/hello.mp3",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 6, 29, 2, 2, 24, 349, DateTimeKind.Local).AddTicks(1731),
                            DateModified = new DateTime(2025, 6, 29, 2, 2, 24, 349, DateTimeKind.Local).AddTicks(1735),
                            DifficultyLevel = 0,
                            English = "Hello",
                            Example = "Hello, how are you today?",
                            ImageUrl = "/images/hello.jpg",
                            ModifiedBy = "System",
                            Notes = "Common greeting",
                            Pronunciation = "həˈloʊ",
                            Vietnamese = "Xin chào",
                            WordSetId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            AudioUrl = "/audio/goodbye.mp3",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 6, 29, 2, 2, 24, 349, DateTimeKind.Local).AddTicks(1742),
                            DateModified = new DateTime(2025, 6, 29, 2, 2, 24, 349, DateTimeKind.Local).AddTicks(1743),
                            DifficultyLevel = 0,
                            English = "Goodbye",
                            Example = "Goodbye, see you tomorrow!",
                            ImageUrl = "/images/goodbye.jpg",
                            ModifiedBy = "System",
                            Notes = "Common farewell",
                            Pronunciation = "ɡʊdˈbaɪ",
                            Vietnamese = "Tạm biệt",
                            WordSetId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            AudioUrl = "/audio/thankyou.mp3",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 6, 29, 2, 2, 24, 349, DateTimeKind.Local).AddTicks(1746),
                            DateModified = new DateTime(2025, 6, 29, 2, 2, 24, 349, DateTimeKind.Local).AddTicks(1747),
                            DifficultyLevel = 0,
                            English = "Thank you",
                            Example = "Thank you for your help.",
                            ImageUrl = "/images/thankyou.jpg",
                            ModifiedBy = "System",
                            Notes = "Common expression of gratitude",
                            Pronunciation = "θæŋk ju",
                            Vietnamese = "Cảm ơn",
                            WordSetId = 1L
                        });
                });

            modelBuilder.Entity("EnglishVocab.Domain.WordSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("WordSets");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Category = "Beginner",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 6, 29, 2, 2, 24, 349, DateTimeKind.Local).AddTicks(4643),
                            DateModified = new DateTime(2025, 6, 29, 2, 2, 24, 349, DateTimeKind.Local).AddTicks(4647),
                            Description = "Essential greetings and phrases for beginners",
                            IsPublic = true,
                            ModifiedBy = "System",
                            Name = "Greetings and Basic Phrases",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Category = "Intermediate",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2025, 6, 29, 2, 2, 24, 349, DateTimeKind.Local).AddTicks(4651),
                            DateModified = new DateTime(2025, 6, 29, 2, 2, 24, 349, DateTimeKind.Local).AddTicks(4652),
                            Description = "Vocabulary related to food, restaurants, and dining",
                            IsPublic = true,
                            ModifiedBy = "System",
                            Name = "Food and Dining",
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("EnglishVocab.Domain.StudySession", b =>
                {
                    b.HasOne("EnglishVocab.Domain.WordSet", "WordSet")
                        .WithMany("StudySessions")
                        .HasForeignKey("WordSetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("WordSet");
                });

            modelBuilder.Entity("EnglishVocab.Domain.UserProgress", b =>
                {
                    b.HasOne("EnglishVocab.Domain.Word", "Word")
                        .WithMany("UserProgress")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Word");
                });

            modelBuilder.Entity("EnglishVocab.Domain.Word", b =>
                {
                    b.HasOne("EnglishVocab.Domain.WordSet", "WordSet")
                        .WithMany("Words")
                        .HasForeignKey("WordSetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("WordSet");
                });

            modelBuilder.Entity("EnglishVocab.Domain.Word", b =>
                {
                    b.Navigation("UserProgress");
                });

            modelBuilder.Entity("EnglishVocab.Domain.WordSet", b =>
                {
                    b.Navigation("StudySessions");

                    b.Navigation("Words");
                });
#pragma warning restore 612, 618
        }
    }
}
